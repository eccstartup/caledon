defn testInf : type -> type
   | testInfImp  = [A : type][F : type -> _] testInf (F A)

defn testInf2 : [a : type] a -> type
   | testInfImp2  = [A : type][F : type -> _] testInf2 A (F A)

defn testInf3 : [a : type] ((a -> a) -> a) -> type
   | testInfImp3  = [A : type][F : _ -> _] testInf3 A F

defn testInf4 : [a : type] ((a -> a) -> a) -> type
   | testInfImp4  = [A : type][F] testInf4 A F

defn testInf5 : [a : type] a -> type
   | testInfImp5  = [A : type][F : (A -> A) -> A ] testInf5 A (F (\ b : A . b ) )
--   | testInfImp5s  = [A : type][F : (A -> A) -> _ ] testInf5 A (F (\ b : A . b ) )

{-

duck == ( 
          ( 
            (((60@fbody+63@xinH@r)+(50@tyA^1))+82@ftyBody@r)@r 
          +
            48@fbody^0^1
          )
        + 
          41@head^1^0^1
        )

∀: type .( ∀: [ [ 0 ]  1 ]  (duck<0>:[ type ]  [ [ 3 ]  4 ]  type) ( 1 )  ( 0 )  .( (duck<0>:[ type ]  [ [ 3 ]  4 ]  type) ( 1 )  ( λ:1 . (0) )  ≤ 1 ) ))


∀: type .( ∀: [ [ 0 ]  1 ]  (duck<0>) ( 1 )  ( 0 )  .( (duck<0>) ( 1 )  ( λ:1 . (0) )  ≤ 1 ) ))

duck => (\x : type . \z : [ 3 ] 4 . x)

-}