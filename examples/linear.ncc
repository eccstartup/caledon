


defn linear : [T : type] [ P : T -> type] ([x : T] P x) -> type
   | linear-app1 = [T P Q][F : [x : T] Q -> P x][G]
                   linear T P (\x . (F x) G)
                <- linear T (\x . Q -> P x) F

   | linear-app2 = [T Q P F G]
                   linear T (\x . P (G x)) (\x . F (G x))
                <- linear T (\x . Q) G
                <- linear Q P F
{-
   | linear-eta1 = linear T ([x : T] [y : A x] P x y) (\x : T. \y : A x . F x y)
                <- linear T ([x : T] [y : A x] P x y) (\x : T . F x)
   | linear-eta2 = linear T ([x : T] [y : A] P x y) (\x : T. \y : A . F y x)
                <- [y :A] linear T ([x : T] P x y) (\x : T . F y x)
   | linear-var  = linear T (\x : T . T) (\x : T . x)
-}

--defn lolli : [T : type] (T -> type) -> type
--   | llam = [F : [x : T] TyF x] linear T TyF F => lolli T TyF
