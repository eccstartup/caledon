fixity left 1 +
fixity left 2 *
fixity left 4 ^

defn zero : prop 
  as [A : prop] A

defn fromZero : zero -> A
  as ?\ A : prop . 
      \ z : zero .
        z A

defn one : prop
  as [A : prop] A -> A

defn unit : one
  as \ A : prop . 
     \ x : A . x

defn caseUnit : (one -> A) -> A
  as ?\ A   : prop     .
      \ foo : one -> A .
        foo unit

defn neg : prop -> prop
  as \ A : prop . [C : prop] A -> C

defn ^ : prop -> prop -> prop
  as \ A B : prop . A -> B

defn + : prop -> prop -> prop
  as \ A B : prop . 
      {C : prop} (A -> C) -> (B -> C) -> C

defn case : At + Bt -> (At -> Ct) -> (Bt -> Ct) -> Ct
  as ?\ At Bt Ct : prop   .
      \ sum    : At + Bt  .
      \ inl    : At -> Ct .
      \ inr    : Bt -> Ct .
        sum { C = Ct } inl inr

defn inL : A -> A + B
  as ?\ A B : prop   .
      \ a   : A      .
     ?\ C   : prop   .
      \ inl : A -> C .
      \ inr : B -> C .
        inl a

defn inR : {A B} B -> A + B
  as ?\ A B : prop   .
      \ b   : B      .
     ?\ C   : prop   .
      \ inl : A -> C .
      \ inr : B -> C .
        inr b

defn * : prop -> prop -> prop
  as \ A B : prop . 
      [C : prop] (A -> B -> C) -> C

defn pair : A -> B -> A * B
  as ?\ A B : prop        .
      \ a   : A           .
      \ b   : B           .
      \ C   : prop        .
      \ pi  : A -> B -> C . 
        pi a b

defn piL : A * B -> A
  as ?\ A B  : prop  .
      \ prod : A * B . 
        prod A (\a : A . \ b : B . a)

defn piR : A * B -> B
  as ?\ A B  : prop  .
      \ prod : A * B . 
        prod B (\a : A . \ b : B . b)



defn dEq : prop -> prop -> prop
   | dEq-sym = dEq Av Av
   
   | dEq-add-ident = dEq (Av + neg Av) zero

   | dEq-zero-pow = dEq (Av ^ zero ) one
   | dEq-one-pow = dEq (Av ^ one ) Av

   | dEq-zero-mult = dEq (Av * zero) zero
   | dEq-one-mult = dEq (Av * one) Av

   | dEq-zero-add = dEq (Av + zero) Av

   | dEq-exp = dEq (Av ^ (Bv + Cv)) (Av ^ Bv * Av ^ Cv)

   | dEq-sym-plus = dEq (Av + Bv) (Bv + Av)
   | dEq-sym-times = dEq (Av * Bv) (Bv * Av)

   | dEq-plus-times-trans = dEq (Av * (Bv + Cv)) (Av * Bv + Av * Cv)
   | dEq-plus-trans = dEq (Av + (Bv + Cv)) ((Av + Bv) + Cv)
   | dEq-times-trans = dEq (Av * (Bv * Cv)) ((Av * Bv) * Cv)
 
   | dEq-plus = dEq (Av + Bv) (Av' + Bv') <- dEq Av Av' <- dEq Bv Bv'
   | dEq-prod = dEq (Av * Bv) (Av' * Bv') <- dEq Av Av' <- dEq Bv Bv'
   | dEq-pow  = dEq (Av ^ Bv) (Av' ^ Bv') <- dEq Av Av' <- dEq Bv Bv'
   
   | dEq-refl = dEq Av Bv <- dEq Bv Av
   
   | dEq-imp = dEq A B 
           <- (A -> B) 
           <- (B -> A)


defn deriv : (prop -> prop) -> (prop -> prop) -> prop
  >| deriv-one = deriv (\x . x ) (\ x . one)
  >| deriv-const = deriv (\ x . R) (\ x . zero)

  >| deriv-sum  = deriv (\ x . A x + B x) (\ x . A' x + B' x)
               <- deriv A A'
               <- deriv B B'
  >| deriv-prod = deriv (\ x . U x * V x) (\ x . U' x * V x + U x * V' x)
               <- deriv V V'
               <- deriv U U'

  >| deriv-pow = deriv (\ x . U x ^ (one + R) ) (\ x . U' x * (one + R) * U x ^ R)
              <- deriv U U' 

   | deriv-dEq  = deriv A B 
               <- ([x] dEq (A x) (A' x))
               <- ([x] dEq (B x) (B' x))
               <- deriv A' B'

#include "../prelude/logic.ncc"

query whatDeriv = propPropAny (deriv (\ x : prop . x ^ (one + one) ))