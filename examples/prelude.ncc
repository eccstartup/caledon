-- an example of how powerfull the syntax is
infixr 0 |->
defn |-> : [a : atom] [b : atom] atom
  as \a : atom . \b : atom . [ha : a] b

infixr 1 <-|
defn <-| : [a : atom] [b : atom] atom
  as \a : atom . \b : atom . b |-> a

infixr 0 |=>
defn |=> : [a : atom] [b : atom] atom
  as \a : atom . \b : atom . {ha : a} b

infixl 1 <=|
defn <=| : [b : atom][a : atom] atom
  as \a : atom . \b : atom . {ha : b} a

infixr 1 =:=
defn =:= : {a : atom} a -> a -> atom
   | eq = [a : atom] a =:= a

defn num  : atom
   | zero = num
   | succ = num → num

defn add   : num → num → num → atom
   | add_z = {N} add zero N N
   | add_s = {N}{M}{R} add N M R → add (succ N) M (succ R)

defn sub   : num → num → num → atom
   | sub_with_add = {N}{M}{R} sub N M R ← add N R M

defn maybe : atom → atom
   | nothing = {a} maybe a
   | just = {a} a → maybe a

defn list : atom → atom
   | nil = {a} list a
   | cons = {a} a -> list a → list a

defn bool : atom
   | true = bool
   | false = bool

defn if : bool -> bool
  as \b . b

infix 1 |:|
defn |:| : {a : atom} a -> a -> (a -> a -> a) -> a
  as ?\t : atom . \a b : t. \f : t -> t -> t. f a b

infix 0 ==>
defn ==> : {a : atom} bool -> ((a -> a -> a) -> a) -> a -> atom
   | thentrue  = [a : atom][f: _ -> a] (true ==> f)  (f (\A B : a. A))
   | thenfalse = [a : atom][f: _ -> a] (false ==> f) (f (\A B : a. B))

defn not : bool -> bool -> atom
  as \a . if a ==> (false |:| true)

