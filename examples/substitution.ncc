--defn example : [ax : atom] ax -> atom
--  as eximp = [atx : atom] example atom atx

defn example : [ax : atom] ax -> atom
  as eximp = example atom atom

{- 

∃ 3@tyA : atom . 
∃ 2@tyB' : 3@tyA → atom . 
∃ 6@tyA : atom . 
∃ 5@tyB' : 6@tyA → atom . 
  2@tyB' atom ≐ atom 
∧ 5@tyB' atom ≐ ∀ 1 : 3@tyA . 2@tyB' 1 
∧ ∀ ax : atom . ax → atom ≐ ∀ 4 : 6@tyA . 5@tyB' 4 
∧ atom ≐ 6@tyA 
∧ atom ≐ 3@tyA

BINDINGS: [("3@tyA",atom),("6@tyA",atom),("5@tyB'",6@tyA → atom)]
CONS: [(5@tyB' atom,3@tyA → atom),(∀ ax : atom . ax → atom,∀ 4 : 6@tyA . 5@tyB' 4),(atom,6@tyA),(atom,3@tyA),(atom,atom)]
-gc-
PROBLEM 6@tyA should't appear outside it's scope
BINDINGS: [("13@xm",6@tyA → atom → atom → (∀ a : atom . (a → atom) → atom) → (example atom atom) → (∀ ax : atom . ax → atom) → atom → atom)
          ,("14@xm",∀ 21@un : 6@tyA . ∀ 20@un : atom . ∀ 19@un : atom . ∀ 18@un : (∀ a : atom . (a → atom) → atom) . ∀ 17@un : (example atom atom) . ∀ 16@un : (∀ ax : atom . ax → atom) . ∀ 15@un : atom . (13@xm 15@un 16@un 17@un 18@un 19@un 20@un 21@un) → atom)
          ,("3@tyA",atom)
          ,("6@tyA",atom)]
CONS: [ (∀ ax : atom . ax → atom,∀ 4 : 6@tyA . forall (13@xm atom example eximp forall 6@tyA 3@tyA 4) (14@xm atom example eximp forall 6@tyA 3@tyA 4))
      , (atom,6@tyA)
      , (atom,3@tyA)
      , (atom,atom)
      , (forall (13@xm atom example eximp forall 6@tyA 3@tyA atom) (14@xm atom example eximp forall 6@tyA 3@tyA atom),3@tyA → atom)
      ]
-}