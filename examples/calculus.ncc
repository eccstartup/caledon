#include "../prelude/rationals.ncc"

defn rat : prop as rational

fixity none 1 +
fixity none 2 *
fixity none 4 ^

defn formula : prop
   | val  = rat -> formula
   | +    = formula  -> formula -> formula
   | *    = formula  -> formula -> formula
   | ^    = formula  -> formula -> formula
   | comp = (rat -> formula) -> formula -> formula
   | ln  = formula -> formula

-- defines a relationship between a function and its derivative
defn deriv : (rat -> formula) -> (rat -> formula) -> prop

  >| deriv-pow = deriv (\ x . val x ^ val R) (\ x . val R * val x ^ val Rm)
              <- r-sub R r-one Rm
  >| deriv-const = deriv (\ x . R) (\ x . val r-zero)
  >| deriv-sum  = deriv (\ x . A x + B x) (\ x . A' x + B' x)
               <- deriv A A'
               <- deriv B B'
  >| deriv-prod = deriv (\ x : rational . U x * V x) (\ x : rational . U' x * V x + U x * V' x)
               <- deriv U U'
               <- deriv V V'
  >| deriv-log  = deriv (\x . ln (val x) ) (\x . val x ^ val r-neg-one)
  >| deriv-exp  = deriv (\x . A ^ val x )  (\x  . ln A * A ^ val x)

   | deriv-chain = deriv (\x . comp F (G x)) (\x . comp F' (G x) * G' x)
                <- deriv F F'
                <- deriv G G'
   | deriv-eq  = deriv A B 
               <- ([x] eq (A x) (A' x))
               <- ([x] eq (B x) (B' x))
               <- deriv A' B'

defn eq : formula -> formula -> prop
   | eq-sym = eq A A

   | eq-comp = eq (comp F A) (comp F' A') <- eq A A' <- [x] eq (F x) (F' x)

   | eq-sym-plus = eq (A + B) (B + A)
   | eq-sym-times = eq (A * B) (B * A)

   | eq-plus-times-trans = eq (A * (B + C)) (A * B + A * C)
   | eq-plus-trans = eq (A + (B + C)) ((A + B) + C)
   | eq-times-trans = eq (A * (B * C)) ((A * B) * C)

   | eq-comp-trans = eq (comp (\ x . comp G (H x)) F) (comp G (comp H F))

   | eq-sum-inst  = eq (val A + val B) (val C) <- r-add A B C

   | eq-plus = eq (A + B) (A' + B') <- eq A A' <- eq B B'
   | eq-prod = eq (A * B) (A' * B') <- eq A A' <- eq B B'
   | eq-pow = eq (A ^ B) (A' ^ B') <- eq A A' <- eq B B'

   | eq-refl = eq A B <- eq B A

--   | eq-prod-inst = eq (val A * val B) (val C) <- r-prod A B C
--   | eq-prod-inst = eq (val A ^ val B) (val C) <- r-raise A B C