defn identity : atom -> atom
  as cons = {f : atom} f -> identity f

infixr 0 =:=

defn =:= : {a : atom} a -> a -> atom
  as eq = [a : atom] a =:= a

let getIdent : [f : atom] identity f -> f -> atom
 be \f : atom . \id : identity f . \v : f . ((=:=) : identity f -> identity f -> atom ) (cons v) id

 

defn getIdent' : {f : atom} identity f -> f -> atom
  as getIdentity = {f}{V:f} getIdent' {f = f} (cons V) V
   | getIdentity2 = {f}{V:f} getIdent' (cons V) V
