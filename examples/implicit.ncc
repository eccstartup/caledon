defn identity : atom -> atom
   | cons = {f : atom} f -> identity f

infix 1 =:=
defn =:= : {a : atom} a -> a -> atom
   | eq = {a : atom} a =:= a

defn getIdent : {f : atom} identity f -> f -> atom
  as ?\f : atom . \id : identity f . \v : f . (cons v) =:= id


-- this demonstrates three ways of doing this
defn getIdent' : {foo : atom} identity foo -> foo -> atom
   | getIdentity1 = {f}{V:f} getIdent' {foo = f} (cons V) V
   | getIdentity2 = {f}{V:f} getIdent' (cons V : identity f) V
   | getIdentity3 = {f}{V:f} (getIdent' : identity f -> f -> atom) (cons V) V
