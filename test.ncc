defn num  : atom
  as zero = num
   | succ = num -> num

defn add   : num -> num -> num -> atom
  as add-z = [N : num] add zero N N
--   | add-s = [N : num][M : num][R : num] add N M R -> add (succ N) M (succ R)

query sum-3 = add zero (succ zero) 'v

{-


zero : num, 
succ : num :|- N' : num               zero : num, succ : num, add-z N' : add zero N N |- ? : add (succ zero) zero 'v          
-----------------------------------------------------------------------------------------------------------------------
zero : num, succ : num, add-z : [N : num] add zero N N |- ? : add (succ zero) zero 'v


G |- A      G, B |- C
---------------------
   G, A -> B |- C



G|- 
----------------------------
      G, A -> B |- C
-}