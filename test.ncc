defn num  : atom
  as zero = num
   | succ = num -> num

defn add   : num -> num -> num -> atom
  as add-z = [N : num] add zero N N
   | add-s = [N : num][M : num][R : num] add N M R -> add (succ N) M (succ R)

query sum-1 = add (succ (succ zero)) 'v (succ (succ (succ zero)))
query sum-2 = add (succ (succ zero)) (succ (succ (succ zero))) 'v
query sum-3 = add (succ zero) zero 'v
























{-

1 -> z                                                     3 -> zero
2 -> z                                                     6 -> zero
`v -> succ 3                                               4 -> add-z 6
                                                           ------------------------------------------------------
0 -> add-s 1 2 3 4                                         add-z 6 : add zero 6 6 |- 4 : add zero zero 3 
------------------------------------------                 ------------------------------------------------------
add-s 1 2 3 4 : add (succ 1) 2 (succ 3)                    add-z : [N : Num] add zero N N |- 4 : add zero zero 3 
add-z : [N : Num] add zero N N                             ------------------------------------------------------
 |- 0 : add (succ zero) zero 'v                             add-z : [N : Num] add zero N N |- 4 : add 1 2 3 
------------------------------------------------------------------------------------------------------------
add-s 1 2 3 : add 1 2 3 -> add (succ 1) 2 (succ 3)
add-z : [N : Num] add zero N N
 |- 0 : add (succ zero) zero 'v                               
--------------------------------------------------------------
add-s 1 2 : [R : Num] add 1 2 R -> add (succ 1) 2 (succ R)
add-z : [N : Num] add zero N N
 |- 0 : add (succ zero) zero 'v                                    
-------------------------------------------------------------------
add-s 1 : [M : Num][R : Num] add 1 M R -> add (succ 1) M (succ R)
add-z : [N : Num] add zero N N
 |- 0 : add (succ zero) zero 'v                                    
-------------------------------------------------------------------
add-s : [N : Num][M : Num][R : Num] add N M R -> add (succ N) M (succ R)
add-z : [N : Num] add zero N N
 |- 0 : add (succ zero) zero 'v

0  |-> add-s zero zero zero (add-z zero)
`v |-> succ zero
-}