#include <logic.ncc>

defn monad : [m : type -> type]
           { return : {A : type} A -> m A}
           { bind : {A2 B : type} m A2 -> (A2 -> m B) -> m B }
           type
  | isMonad  = [M : type -> type]
               [Return : {A : type} A -> M A]
               [Bind : {A2 B : type} M A2 -> (A2 -> M B) -> M B]
               monad M {return = Return} {bind = Bind}
-- left identity
              <- ( [A B][V][F : A -> M B] Bind (Return V) F =:= F V )
-- right identity
              <- ( [A][MA : M A] Bind MA Return =:= MA )
-- associatiity
              <- ( [A B C : type][MA : M A][F : A -> M B][G : B -> M C] 
                   Bind (Bind MA F) G =:= Bind MA (\x . Bind (F x) G))

defn return  : {M      : type -> type                             }
               {Return : {A : type} A -> M A                      }
               {Bind   : {A2 B : type} M A2 -> (A2 -> M B) -> M B }
               {mon    : monad M {return = Return}{ bind = Bind } } 
               {Av     : type                                     } 
               Av -> M Av

  as ?\ M      : type -> type                             . 
     ?\ Return : {A : type} A -> M A                      . 
     ?\ Bind   : {A2 B : type} M A2 -> (A2 -> M B) -> M B . 
     ?\ mon    : monad M {return = Return}{ bind = Bind } .  
     ?\ Av     : type                                     .
     Return {A = Av}

fixity right 0 >>=

defn >>=     : {M      : type -> type                             }
               {Return : {A : type} A -> M A                      }
               {Bind   : {A2 B : type} M A2 -> (A2 -> M B) -> M B }
               {mon    : monad M {return = Return}{ bind = Bind } } 
               {Av Bv  : type                                     } 
               M Av -> (Av -> M Bv) -> M Bv
  as ?\ M      : type -> type                             . 
     ?\ Return : {A : type} A -> M A                      . 
     ?\ Bind   : {A2 B : type} M A2 -> (A2 -> M B) -> M B . 
     ?\ mon    : monad M {return = Return}{ bind = Bind } .  
     ?\ Av Bv  : type                                     .
     Bind {A2 = Av} {B = Bv}
