-------------
-- exists  --
-------------
fixity lambda exists
defn exists : [N : type] ( N -> type ) -> type
  as \ N : type      . 
     \ P : N -> type .
     [ C : type ] ([a : N] P a -> C) -> C 

defn pack : {N : type }[F : N -> type][V] F V -> ( exists a : N . F a )
  as ?\ N  : type             .
      \ F  : N -> type        . 
      \ V  : N                .
      \ FV : F V              .
      \ C  : type             .
      \ FA : [a : N] F a -> C .
        FA V FV

defn open : {N}{F : N -> type}{A : type} ( exists a : N . F a ) -> ([a : N] F a -> A) -> A
  as ?\ N  : type               .
     ?\ F  : N -> type          .
     ?\ A  : type               .
      \ EX : exists a : N . F a .
      \ Fo : [a : N] F a -> A   .
        EX A Fo

---------------
-- searches ---
---------------
defn any : {Search : type} (Search -> type) -> prop
   | is = [V : A][F : A -> type] F V -> any {Search = A} F

defn openAny : [A][F : A -> type] any F -> [V : A] F V -> prop
   | openAnyDef = openAny A F (is V F FV) V FV

fixity lambda free
defn free : [A : type] (A -> type) -> type
  as \a : type . any { Search = a }

-------------------
--- Constraints ---
-------------------
fixity none 5 =:=
defn =:= : Q -> Q -> prop
  >| eq = (B : A) =:= B

-- searching for these is SLOW
fixity none 0 /\
defn /\ : type -> type -> prop
  >| and = A -> B -> A /\ B

fixity none 0 \/
defn \/ : type -> type -> prop
   | or1 = A -> A \/ B
   | or2 = B -> A \/ B

fixity left 0 ==
-- currently we can't do any inference inside of definitional signatures
defn == : {q : type} (q -> type) -> q -> type 
  as ?\q . \foo : q -> type . \v : q . foo v
